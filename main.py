import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import gspread
from datetime import datetime, timezone, timedelta
import requests
import json
from threading import Thread
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from config import BOT_TOKEN, SPREADSHEET_URL, ADMIN_ID, EMOJI_MAP, get_google_credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/AtbTAI251_bot/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CustomHTTPHandler(logging.Handler):
    def emit(self, record):
        try:
            log_entry = self.format(record)
            if "üìù" not in log_entry:  # –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å user actions
                send_log_to_server(log_entry, "bot")
        except:
            pass

http_handler = CustomHTTPHandler()
http_handler.setLevel(logging.INFO)
logger.addHandler(http_handler)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è httpx –∏ httpcore
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_actions_logger = logging.getLogger('user_actions')
user_actions_logger.setLevel(logging.INFO)
user_actions_handler = logging.FileHandler('/root/AtbTAI251_bot/user_actions.log')
user_actions_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
user_actions_logger.addHandler(user_actions_handler)
user_actions_logger.propagate = False

def send_log_to_server(log_message, log_type="bot", level="info"):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    def send_async():
        try:
            requests.post(
                'http://45.150.8.223/logs.php',
                data=json.dumps({
                    'log': log_message,
                    'type': log_type,
                    'level': level,
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }),
                headers={'Content-Type': 'application/json'},
                timeout=3
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")  # –í –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
    
    Thread(target=send_async).start()

def log_user_action(user_id, username, action, details="", level="info"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = f"ID:{user_id} (@{username})"
    log_message = f"üë§ {user_info} | {action}"
    if details:
        log_message += f" | {details}"
    
    user_actions_logger.info(log_message)
    logger.info(f"üìù {log_message}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    send_log_to_server(log_message, "user_action", level)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def connect_google_sheets():
    try:
        creds_dict = get_google_credentials()
        if creds_dict:
            gc = gspread.service_account_from_dict(creds_dict)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        else:
            gc = gspread.service_account(filename='credentials.json')
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —á–µ—Ä–µ–∑ —Ñ–∞–π–ª credentials.json")
        return gc.open_by_url(SPREADSHEET_URL)
    except Exception as e:
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: {str(e)}"
        logger.error(error_msg)
        send_log_to_server(error_msg, "error", "critical")
        return None

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
cache_data = {}
cache_timeout = timedelta(minutes=5)

def get_cached_sheet_data(sheet_name):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    now = datetime.now()
    
    if sheet_name in cache_data:
        data, timestamp = cache_data[sheet_name]
        if (now - timestamp) < cache_timeout:
            logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è {sheet_name}")
            return data
    
    try:
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {sheet_name}")
        sheet = db.worksheet(sheet_name)
        data = sheet.get_all_values()
        cache_data[sheet_name] = (data, now)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {sheet_name} (—Å—Ç—Ä–æ–∫: {len(data)})")
        return data
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {sheet_name}: {str(e)}"
        logger.error(error_msg)
        send_log_to_server(error_msg, "error", "error")
        if sheet_name in cache_data:
            logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –¥–ª—è {sheet_name}")
            return cache_data[sheet_name][0]
        return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = None
user_data = {}
user_states = {}
week_cache = None
week_cache_time = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    log_user_action(user_id, username, "–ö–æ–º–∞–Ω–¥–∞ /start")
    send_log_to_server(f"üü¢ /start –æ—Ç {user_id} (@{username})", "command")
    
    try:
        students_data_records = get_cached_sheet_data("–°—Ç—É–¥–µ–Ω—Ç—ã")
        header = students_data_records[0]
        students_data = []
        for row in students_data_records[1:]:
            if len(row) >= len(header):
                student_dict = {header[i]: row[i] for i in range(len(header))}
                students_data.append(student_dict)

        user_found = False
        student_data = None
        
        for student in students_data:
            existing_id = str(student.get('Telegram ID', '')).strip()
            if existing_id and existing_id.isdigit() and int(existing_id) == user_id:
                user_found = True
                student_data = {
                    'fio': student['–§–ò–û'],
                    'number': student['‚Ññ'],
                    'subgroup': student['–ü–æ–¥–≥—Ä—É–ø–ø–∞']
                }
                break
        
        if user_found:
            user_data[user_id] = student_data
            user_states[user_id] = "registered"
            log_user_action(user_id, username, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥", f"–§–ò–û: {student_data['fio']}")
            
            keyboard = [[InlineKeyboardButton("üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="mark_attendance")]]
            if user_id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"‚úÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {student_data['fio']}!\n–ü–æ–¥–≥—Ä—É–ø–ø–∞: {student_data['subgroup']}",
                reply_markup=reply_markup
            )
        else:
            user_states[user_id] = "waiting_for_fio"
            await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ start –¥–ª—è {user_id}: {str(e)}"
        logger.error(error_msg)
        send_log_to_server(error_msg, "error", "error")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    text = update.message.text
    
    if user_states.get(user_id) == "waiting_for_fio":
        await handle_fio(update, context)
    else:
        log_user_action(user_id, username, "–ù–ï–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï", text, "warning")
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if db is None:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
        
    fio = update.message.text.strip()
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    
    log_user_action(user_id, username, "–ü–æ–∏—Å–∫ –§–ò–û", f"'{fio}'")
    
    try:
        students_sheet = db.worksheet("–°—Ç—É–¥–µ–Ω—Ç—ã")
        students_data = students_sheet.get_all_records()
        
        user_found = False
        student_number = None
        subgroup = None
        
        for student in students_data:
            if student['–§–ò–û'].lower() == fio.lower():
                existing_id = str(student.get('Telegram ID', '')).strip()
                if existing_id and existing_id.isdigit() and int(existing_id) != user_id:
                    log_user_action(user_id, username, "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", f"–§–ò–û: '{fio}'")
                    await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    return
                else:
                    user_found = True
                    student_number = student['‚Ññ']
                    subgroup = student['–ü–æ–¥–≥—Ä—É–ø–ø–∞']
                    break
        
        if not user_found:
            log_user_action(user_id, username, "–§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", f"'{fio}'")
            await update.message.reply_text("‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID
        cell = students_sheet.find(str(student_number))
        students_sheet.update_cell(cell.row, 4, str(user_id))
        
        user_data[user_id] = {
            'fio': fio,
            'number': student_number,
            'subgroup': subgroup
        }
        user_states[user_id] = "registered"
        
        log_user_action(user_id, username, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", f"‚Ññ{student_number}, –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}")
        send_log_to_server(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_id} -> {fio}", "registration")
        keyboard = [[InlineKeyboardButton("üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="mark_attendance")]]
        if user_id == ADMIN_ID:
            keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–§–ò–û: {fio}\n–ü–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {user_id}: {str(e)}"
        logger.error(error_msg)
        log_user_action(user_id, username, "–û–®–ò–ë–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò", str(e), "error")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    
    if user_id != ADMIN_ID:
        log_user_action(user_id, username, "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", "", "warning")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    log_user_action(user_id, username, "–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="admin_students")],
        [InlineKeyboardButton("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data="admin_status")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin_clear_cache")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def admin_show_students(query):
    user_id = query.from_user.id
    username = query.from_user.username or "–ë–µ–∑ username"
    
    log_user_action(user_id, username, "–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    
    try:
        students_data_records = get_cached_sheet_data("–°—Ç—É–¥–µ–Ω—Ç—ã")
        text = "üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
        for student in students_data_records[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if len(student) >= 4:
                status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if student[3] else "‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
                text += f"{student[0]}. {student[1]} - {status}\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def clear_cache(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return
    
    cache_size = len(cache_data)
    cache_data.clear()
    logger.info("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    await update.message.reply_text(f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cache_size}")

async def admin_clear_cache_from_query(query):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = query.from_user.id
    username = query.from_user.username or "–ë–µ–∑ username"
    
    if user_id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    cache_size_before = len(cache_data)
    cache_data.clear()
    
    log_user_action(user_id, username, "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞", f"—É–¥–∞–ª–µ–Ω–æ {cache_size_before} –∑–∞–ø–∏—Å–µ–π")
    
    text = f"‚úÖ **–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!**\n\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cache_size_before}"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)

# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
async def show_week_selection(query, user_id):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    student_data = user_data[user_id]
    subgroup = student_data['subgroup']
    username = query.from_user.username or "–ë–µ–∑ username"
    
    log_user_action(user_id, username, "–í—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ–¥–µ–ª—å
        schedule_data = get_cached_sheet_data(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª—è—Ö
        current_week_info = get_week_info(0)  # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
        previous_week_info = get_week_info(-1)  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è
        
        keyboard = []
        
        # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if current_week_info:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÖ {current_week_info['string']}", 
                    callback_data=f"week_{current_week_info['string']}"
                )
            ])
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        if previous_week_info:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            week_has_classes = any(
                len(row) > 2 and row[0] == previous_week_info['string'] 
                for row in schedule_data[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            )
            
            if week_has_classes:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚Ü©Ô∏è {previous_week_info['string']}", 
                        callback_data=f"week_{previous_week_info['string']}"
                    )
                ])
            else:
                # –ï—Å–ª–∏ –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                keyboard.append([
                    InlineKeyboardButton(
                        "‚ùå –ù–µ–¥–µ–ª–∏ –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", 
                        callback_data="week_none"
                    )
                ])
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è —Å–µ–º–µ—Å—Ç—Ä–∞)
            keyboard.append([
                InlineKeyboardButton(
                    "‚ùå –ù–µ–¥–µ–ª–∏ –Ω–µ—Ç", 
                    callback_data="week_none"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_week_selection: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def show_days_with_status(query, user_id, week_string=None):
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    student_data = user_data[user_id]
    subgroup = student_data['subgroup']
    
    if week_string:
        week_type = week_string
        context = query._context
        context.user_data['week_string'] = week_string
    else:
        week_type = get_current_week_type()
    
    try:
        schedule_data = get_cached_sheet_data(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        day_status = {}
        
        for row in schedule_data[1:]:
            if len(row) > 2 and row[0] == week_type:
                day = row[1]
                if day not in day_status:
                    day_status[day] = {'total': 0, 'marked': 0}
                
                day_status[day]['total'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞
                header = schedule_data[0]
                student_col = None
                for idx, cell in enumerate(header):
                    if str(cell).strip() == str(student_data['number']):
                        student_col = idx
                        break
                
                if student_col and len(row) > student_col and row[student_col].strip() in ['‚úÖ', '‚ùå', '‚ö†Ô∏è']:
                    day_status[day]['marked'] += 1
        
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
        keyboard = []
        
        for day in days:
            status_text = ""
            if day in day_status:
                marked = day_status[day]['marked']
                total = day_status[day]['total']
                if total > 0:
                    if marked == total:
                        status_text = " ‚úÖ"
                    elif marked > 0:
                        status_text = " üü°"
                    else:
                        status_text = " ‚ùå"
            
            keyboard.append([InlineKeyboardButton(f"{day}{status_text}", callback_data=f"day_{day}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mark_attendance")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({week_type}):\n\n"
            "‚úÖ - –≤—Å–µ –ø–∞—Ä—ã –æ—Ç–º–µ—á–µ–Ω—ã\n"
            "üü° - —á–∞—Å—Ç—å –ø–∞—Ä –æ—Ç–º–µ—á–µ–Ω–∞\n"
            "‚ùå - –ø–∞—Ä—ã –Ω–µ –æ—Ç–º–µ—á–µ–Ω—ã",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_days_with_status: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def show_subjects(query, day, user_id, week_string=None):
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    student_data = user_data[user_id]
    subgroup = student_data['subgroup']
    student_number = student_data['number']
    if week_string:
        week_type = week_string
        context = query._context
        context.user_data['week_string'] = week_string
    else:
        week_type = get_current_week_type()
    
    username = query.from_user.username or "–ë–µ–∑ username"
    log_user_action(user_id, username, f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤", f"–¥–µ–Ω—å: {day}")
    
    try:
        schedule_data = get_cached_sheet_data(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        subjects_with_status = []
        header = schedule_data[0]
        
        student_col = None
        for idx, cell in enumerate(header):
            if str(cell).strip() == str(student_number):
                student_col = idx
                break
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        day_rows = []
        for row_num, row in enumerate(schedule_data[1:], start=2):
            if len(row) > 2 and row[0] == week_type and row[1] == day:
                day_rows.append((row_num, row))
        
        for row_num, row in day_rows:
            subject = row[2]
            subject_type = "–õ–µ–∫—Ü–∏—è" if "–ª–µ–∫—Ü–∏–æ–Ω" in subject.lower() else "–ü—Ä–∞–∫—Ç–∏–∫–∞" if "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫" in subject.lower() else "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è" if "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω" in subject.lower() else "–ó–∞–Ω—è—Ç–∏–µ"
            
            status = ""
            if student_col and len(row) > student_col:
                mark = row[student_col].strip()
                if mark == '‚úÖ':
                    status = ' ‚úÖ'
                elif mark == '‚ùå':
                    status = ' ‚ùå'
                elif mark == '‚ö†Ô∏è':
                    status = ' ‚ö†Ô∏è'
            
            button_text = f"{subject_type}{status}"
            subjects_with_status.append((subject, button_text, row_num))
        
        if not subjects_with_status:
            await query.edit_message_text(f"‚ùå –ù–∞ {day} ({week_type}) –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
            return
            
        keyboard = []
        for full_subject, button_text, row_num in subjects_with_status:
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"subject_{day}_{row_num}")])
        
        keyboard.append([InlineKeyboardButton("‚Äî‚Äî‚Äî", callback_data="separator")])
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å. –Ω–∞ –≤—Å–µ—Ö", callback_data=f"all_{day}_present"),
            InlineKeyboardButton("‚ùå –û—Ç—Å—É—Ç. –Ω–∞ –≤—Å–µ—Ö", callback_data=f"all_{day}_absent")
        ])
        keyboard.append([
            InlineKeyboardButton("‚ö†Ô∏è –û—Ç—Å—É—Ç. –Ω–∞ –≤—Å–µ—Ö(–£)", callback_data=f"all_{day}_excused")
        ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mark_attendance"),
            InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="mark_complete")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        full_subjects_text = "\n".join([f"‚Ä¢ {subject}{status}" for subject, _, status in subjects_with_status])
        
        await query.edit_message_text(
            f"üìö {day} - {week_type}:\n\n{full_subjects_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_subjects: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def mark_attendance(query, day, row_num, action, user_id):
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    student_data = user_data[user_id]
    student_number = student_data['number']
    username = query.from_user.username or "–ë–µ–∑ username"
    subgroup = student_data['subgroup']
    
    emoji_map = {'present': '‚úÖ', 'absent': '‚ùå', 'excused': '‚ö†Ô∏è'}
    mark = emoji_map.get(action, '‚ùì')
    
    log_user_action(user_id, username, f"–û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏", f"–¥–µ–Ω—å: {day}, —Å—Ç–∞—Ç—É—Å: {mark}")
    send_log_to_server(f"‚úÖ –û—Ç–º–µ—Ç–∫–∞: {user_id} -> {day} {mark}", "attendance")
    try:
        schedule_sheet = db.worksheet(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        header = schedule_sheet.row_values(1)
        
        student_col = None
        for idx, cell in enumerate(header):
            if str(cell).strip() == str(student_number):
                student_col = idx + 1
                break
        
        if student_col is None:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏")
            return
        
        if row_num == "all":
            # –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞
            schedule_data = schedule_sheet.get_all_values()
            updated_count = 0
            
            current_week = get_current_week_type()
            
            for i, row in enumerate(schedule_data[1:], start=2):
                if len(row) > 2 and row[0] == current_week and row[1] == day:
                    if student_col <= len(row):
                        schedule_sheet.update_cell(i, student_col, mark)
                        updated_count += 1
            
            if updated_count > 0:
                # –û—á–∏—â–∞–µ–º –∫—ç—à
                cache_key = f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞"
                if cache_key in cache_data:
                    del cache_data[cache_key]
                
                log_user_action(user_id, username, "–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π")
                
                await query.edit_message_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ –Ω–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö!\n"
                    f"üìÖ –î–µ–Ω—å: {day}\n"
                    f"‚úÖ –°—Ç–∞—Ç—É—Å: {mark}\n"
                    f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data=f"day_{day}")],
                        [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É", callback_data="mark_complete")]
                    ])
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É")
        else:
            # –û—Ç–º–µ—Ç–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
            row_num_int = int(row_num)
            schedule_sheet.update_cell(row_num_int, student_col, mark)
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            cache_key = f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞"
            if cache_key in cache_data:
                del cache_data[cache_key]
            
            log_user_action(user_id, username, "–û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", f"—Å—Ç—Ä–æ–∫–∞: {row_num}, —Å—Ç–∞—Ç—É—Å: {mark}")
            
            await query.edit_message_text(
                f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\nüìÖ –î–µ–Ω—å: {day}\n‚úÖ –°—Ç–∞—Ç—É—Å: {mark}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data=f"day_{day}")],
                    [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É", callback_data="mark_complete")]
                ])
            )
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ {user_id}: {str(e)}"
        logger.error(error_msg)
        log_user_action(user_id, username, "–û–®–ò–ë–ö–ê –û–¢–ú–ï–¢–ö–ò", f"{day} {action} - {str(e)}", "error")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏")

# –£–¢–ò–õ–ò–¢–´
def get_current_week_type():
    """–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global week_cache, week_cache_time
    
    # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
    now = datetime.now()
    if week_cache and week_cache_time and (now - week_cache_time).seconds < 60:
        return week_cache
    
    try:
        # –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+3)
        moscow_tz = timezone(timedelta(hours=3))
        now_tz = datetime.now(moscow_tz)
        
        # –ù–∞—á–∞–ª–æ —Å–µ–º–µ—Å—Ç—Ä–∞ - 1 —Å–µ–Ω—Ç—è–±—Ä—è 2025
        semester_start = datetime(2025, 9, 1, tzinfo=moscow_tz)
        days_diff = (now_tz - semester_start).days
        week_number = (days_diff // 7) + 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è)
        week_type = "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" if week_number % 2 == 0 else "–ß–∏—Å–ª–∏—Ç–µ–ª—å"
        
        result = f"{week_type} - {week_number} –Ω–µ–¥–µ–ª—è"
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        week_cache = result
        week_cache_time = now
        
        logger.info(f"üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {result} (–¥–∞—Ç–∞: {now_tz.strftime('%d.%m.%Y %H:%M')})")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏: {e}")
        # Fallback
        return "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - 8 –Ω–µ–¥–µ–ª—è"

def get_week_info(week_offset=0):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
    week_offset = 0 - —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
    week_offset = -1 - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è
    """
    try:
        moscow_tz = timezone(timedelta(hours=3))
        now = datetime.now(moscow_tz)
        
        semester_start = datetime(2025, 9, 1, tzinfo=moscow_tz)
        days_diff = (now - semester_start).days
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        week_number = (days_diff // 7) + 1 + week_offset
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ–¥–µ–ª—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–µ–º–µ—Å—Ç—Ä–∞ (1-17)
        if week_number < 1 or week_number > 17:
            return None
        
        week_type = "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" if week_number % 2 == 0 else "–ß–∏—Å–ª–∏—Ç–µ–ª—å"
        
        return {
            'number': week_number,
            'type': week_type,
            'string': f"{week_type} - {week_number} –Ω–µ–¥–µ–ª—è"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏: {e}")
        return None

# –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    username = query.from_user.username or "–ë–µ–∑ username"
    data = query.data
    
    log_user_action(user_id, username, "Callback", data)
    
    try:
        if data == "mark_attendance":
            await show_week_selection(query, user_id)
        elif data.startswith("week_"):
            if data == "week_none":
                await query.answer("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏", show_alert=True)
                return
            week_string = data[5:]
            context.user_data['week_string'] = week_string
            await show_days_with_status(query, user_id, week_string)
        elif data.startswith("week_"):
            if data == "week_none":
                await query.answer("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏", show_alert=True)
                return
            week_string = data[5:]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context
            context.user_data['week_string'] = week_string
            await show_days_with_status(query, user_id, week_string)
        elif data == "admin_panel":
            if user_id == ADMIN_ID:
                keyboard = [
                    [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="admin_students")],
                    [InlineKeyboardButton("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data="admin_status")],
                    [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin_clear_cache")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
            else:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        elif data == "admin_students":
            await admin_show_students(query)
        elif data == "admin_clear_cache":
            await admin_clear_cache_from_query(query)
        elif data == "back_to_main":
            keyboard = [[InlineKeyboardButton("üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="mark_attendance")]]
            if user_id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        elif data.startswith("day_"):
            day = data.split("_")[1]
            week_string = context.user_data.get('week_string')
            await show_subjects(query, day, user_id, week_string)
        elif data.startswith("subject_"):
            parts = data.split("_")
            day = parts[1]
            row_num = parts[2]
            await show_subject_actions(query, day, row_num)
        elif data.startswith("action_"):
            parts = data.split("_")
            day = parts[1]
            row_num = parts[2]
            action = parts[3]
            await mark_attendance(query, day, row_num, action, user_id)
        elif data.startswith("all_"):
            parts = data.split("_")
            day = parts[1]
            action = parts[2]
            await mark_attendance(query, day, "all", action, user_id)
        elif data == "mark_complete":
            await show_days_with_status(query, user_id)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ button_handler {user_id}: {str(e)} | callback: {data}"
        logger.error(error_msg)
        send_log_to_server(error_msg, "error", "error")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def show_subject_actions(query, day, row_num):
    user_id = query.from_user.id
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f"action_{day}_{row_num}_present"),
            InlineKeyboardButton("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f"action_{day}_{row_num}_absent")
        ],
        [
            InlineKeyboardButton("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª(–£)", callback_data=f"action_{day}_{row_num}_excused"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"day_{day}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=reply_markup)

def main():
    global db
    send_log_to_server("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", "system", "info")
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê...")
    
    try:
        db = connect_google_sheets()
        if db is None:
            send_log_to_server("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets", "system", "critical")
            return
        
        send_log_to_server("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Google Sheets", "system", "info")
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_panel))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("stop", stop_command))
        application.add_handler(CommandHandler("clearcache", clear_cache))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
        application.add_handler(CallbackQueryHandler(button_handler))

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        error_msg = f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï: {str(e)}"
        logger.critical(error_msg)
        send_log_to_server(error_msg, "system", "critical")

# –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        student_data = user_data[user_id]
        await update.message.reply_text(f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n–§–ò–û: {student_data['fio']}\n–ü–æ–¥–≥—Ä—É–ø–ø–∞: {student_data['subgroup']}")
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        logger.critical("üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await update.message.reply_text("üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        os._exit(0)
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

if __name__ == "__main__":
    main()