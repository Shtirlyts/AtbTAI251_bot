import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import gspread
from datetime import datetime, timezone, timedelta
import os
import logging
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from config import BOT_TOKEN, SPREADSHEET_URL, ADMIN_ID, EMOJI_MAP, get_google_credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/AtbTAI251_bot/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è httpx –∏ httpcore
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def connect_google_sheets():
    try:
        creds_dict = get_google_credentials()
        if creds_dict:
            # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            gc = gspread.service_account_from_dict(creds_dict)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        else:
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏–∑ —Ñ–∞–π–ª–∞
            gc = gspread.service_account(filename='credentials.json')
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —á–µ—Ä–µ–∑ —Ñ–∞–π–ª credentials.json")
        return gc.open_by_url(SPREADSHEET_URL)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
cache_data = {}
cache_timeout = timedelta(minutes=5)  # 5 –º–∏–Ω—É—Ç –∫—ç—à

def get_cached_sheet_data(sheet_name):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global cache_data
    
    now = datetime.now()
    if sheet_name in cache_data:
        data, timestamp = cache_data[sheet_name]
        if now - timestamp < cache_timeout:
            logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è {sheet_name}")
            return data
    
    try:
        sheet = db.worksheet(sheet_name)
        data = sheet.get_all_values()
        cache_data[sheet_name] = (data, now)
        return data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {sheet_name}: {e}")
        if sheet_name in cache_data:
            logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –¥–ª—è {sheet_name}")
            return cache_data[sheet_name][0]
        return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = None
user_data = {}
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    logger.info(f"üü¢ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        students_data_records = get_cached_sheet_data("–°—Ç—É–¥–µ–Ω—Ç—ã")
        header = students_data_records[0]
        students_data = []
        for row in students_data_records[1:]:
            if len(row) >= len(header):
                student_dict = {header[i]: row[i] for i in range(len(header))}
                students_data.append(student_dict)

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ Telegram ID
        user_found = False
        student_data = None
        
        for student in students_data:
            existing_id = str(student.get('Telegram ID', '')).strip()
            if existing_id and existing_id.isdigit() and int(existing_id) == user_id:
                user_found = True
                student_data = {
                    'fio': student['–§–ò–û'],
                    'number': student['‚Ññ'],
                    'subgroup': student['–ü–æ–¥–≥—Ä—É–ø–ø–∞']
                }
                break
        
        if user_found:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            user_data[user_id] = student_data
            user_states[user_id] = "registered"
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {student_data['fio']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = []
            keyboard.append([InlineKeyboardButton("üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="mark_attendance")])
            
            if user_id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {student_data['fio']}!\n"
                f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: {student_data['subgroup']}\n",
                reply_markup=reply_markup
            )
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –§–ò–û
        user_states[user_id] = "waiting_for_fio"
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"
        )
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –§–ò–û")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    text = update.message.text
    logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (@{username}): {text}")
    
    if user_states.get(user_id) == "waiting_for_fio":
        await handle_fio(update, context)
    else:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {text}")
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if db is None:
        logger.error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    fio = update.message.text.strip()
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    
    logger.info(f"üîç –ü–æ–∏—Å–∫ –§–ò–û: '{fio}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        students_sheet = db.worksheet("–°—Ç—É–¥–µ–Ω—Ç—ã")
        students_data = students_sheet.get_all_records()
        
        user_found = False
        student_number = None
        subgroup = None
        
        for student in students_data:
            if student['–§–ò–û'].lower() == fio.lower():
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student}")
                
                existing_id = str(student.get('Telegram ID', '')).strip()
                if existing_id and existing_id.isdigit() and int(existing_id) != user_id:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –§–ò–û '{fio}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {existing_id})")
                    await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    return
                else:
                    user_found = True
                    student_number = student['‚Ññ']
                    subgroup = student['–ü–æ–¥–≥—Ä—É–ø–ø–∞']
                    break
        
        if not user_found:
            logger.warning(f"‚ùå –§–ò–û '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text("‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID
        cell = students_sheet.find(str(student_number))
        students_sheet.update_cell(cell.row, 4, str(user_id))
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω Telegram ID {user_id} –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ‚Ññ{student_number} ({fio})")
        
        user_data[user_id] = {
            'fio': fio,
            'number': student_number,
            'subgroup': subgroup
        }
        
        user_states[user_id] = "registered"
        
        # –°–û–ó–î–ê–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –° –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨–Æ –î–õ–Ø –ê–î–ú–ò–ù–ê
        keyboard = []
        keyboard.append([InlineKeyboardButton("üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="mark_attendance")])
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if user_id == ADMIN_ID:
            keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
            f"–§–ò–û: {fio}\n"
            f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}\n",
            reply_markup=reply_markup
        )
        logger.info(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {fio}, –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_fio –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    
    if user_id != ADMIN_ID:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (@{username})")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    logger.info(f"üõ†Ô∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (@{username})")
    
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="admin_students")],
        [InlineKeyboardButton("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data="admin_status")],  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def admin_show_students(query):
    user_id = query.from_user.id
    username = query.from_user.username or "–ë–µ–∑ username"
    
    logger.info(f"üë• –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} (@{username})")
    
    try:
        students_data_records = get_cached_sheet_data("–°—Ç—É–¥–µ–Ω—Ç—ã")
        text = "üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
        for student in students_data_records:
            status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if student.get('Telegram ID') else "‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            text += f"{student['‚Ññ']}. {student['–§–ò–û']} - {status}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
        logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def clear_cache(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return
    
    global cache_data
    cache_data.clear()
    logger.info("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    await update.message.reply_text("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")

async def admin_server_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        import psutil
        import subprocess
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤)
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
        bot_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
            try:
                if 'python' in proc.info['name'] and 'main.py' in ' '.join(proc.cmdline()):
                    bot_processes.append(proc)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        
        bot_count = len(bot_processes)
        bot_memory = sum(proc.info['memory_info'].rss for proc in bot_processes) / 1024 / 1024  # MB
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = (
            "üñ•Ô∏è **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞**\n\n"
            f"**CPU:** {cpu_percent}%\n"
            f"**–ü–∞–º—è—Ç—å:** {memory.percent}% ({memory.used//1024//1024}M–ë / {memory.total//1024//1024}M–ë)\n"
            f"**–î–∏—Å–∫:** {disk.percent}% ({disk.used//1024//1024//1024}G–ë / {disk.total//1024//1024//1024}G–ë)\n\n"
            f"**–ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞:** {bot_count}\n"
            f"**–ü–∞–º—è—Ç—å –±–æ—Ç–∞:** {bot_memory:.1f} M–ë\n\n"
            f"**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {get_uptime()}\n"
            f"**–õ–æ–≥ —Ñ–∞–π–ª:** {get_log_file_size()}"
        )
        
        await update.message.reply_text(status_text, parse_mode='Markdown')
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞")

def get_uptime():
    """–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    try:
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.readline().split()[0])
        
        days = int(uptime_seconds // 86400)
        hours = int((uptime_seconds % 86400) // 3600)
        return f"{days}–¥ {hours}—á"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def get_log_file_size():
    """–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
    try:
        size = os.path.getsize('/root/AtbTAI251_bot/bot.log') / 1024 / 1024
        return f"{size:.1f} M–ë"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def admin_server_status_from_query(query):
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ callback"""
    user_id = query.from_user.id
    
    try:
        import psutil
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ admin_server_status –Ω–æ –¥–ª—è query
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        bot_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
            try:
                if 'python' in proc.info['name'] and 'main.py' in ' '.join(proc.cmdline()):
                    bot_processes.append(proc)
            except:
                pass
        
        bot_count = len(bot_processes)
        
        status_text = (
            "üñ•Ô∏è **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞**\n\n"
            f"**CPU:** {cpu_percent}%\n"
            f"**–ü–∞–º—è—Ç—å:** {memory.percent}%\n"
            f"**–ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞:** {bot_count}\n"
            f"**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {get_uptime()}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_text, parse_mode='Markdown')
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—Ä–æ—à–µ–Ω —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
async def handle_mark_complete(query, user_id):
    username = query.from_user.username or "–ë–µ–∑ username"
    logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (@{username})")
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await show_days_with_status(query, user_id)

async def show_days_with_status(query, user_id, week_string=None):
    if user_id not in user_data:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    username = query.from_user.username or "–ë–µ–∑ username"
    student_data = user_data[user_id]
    subgroup = student_data['subgroup']
    student_number = student_data['number']
    
    week_type = week_string if week_string else get_current_week_type()
    
    logger.info(f"üìÖ –ü–æ–∫–∞–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {student_data['fio']}")
    
    try:
        schedule_data = get_cached_sheet_data(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        day_status = {}
        for row in schedule_data[1:]:
            if len(row) > 2 and row[0] == week_type:
                day = row[1]
                if day not in day_status:
                    day_status[day] = {'total': 0, 'marked': 0}
                
                day_status[day]['total'] += 1
                
                header = schedule_data[0]
                student_col = None
                for idx, cell in enumerate(header):
                    if str(cell).strip() == str(student_number):
                        student_col = idx
                        break
                
                if student_col and len(row) > student_col and row[student_col].strip() in ['‚úÖ', '‚ùå', '‚ö†Ô∏è']:
                    day_status[day]['marked'] += 1
        
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
        keyboard = []
        
        for day in days:
            status_text = ""
            if day in day_status:
                marked = day_status[day]['marked']
                total = day_status[day]['total']
                if total > 0:
                    if marked == total:
                        status_text = " ‚úÖ"
                    elif marked > 0:
                        status_text = " üü°"
                    else:
                        status_text = " ‚ùå"
            
            keyboard.append([InlineKeyboardButton(f"{day}{status_text}", callback_data=f"day_{day}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mark_attendance")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({week_type}):\n\n"
            "‚úÖ - –≤—Å–µ –ø–∞—Ä—ã –æ—Ç–º–µ—á–µ–Ω—ã\n"
            "üü° - —á–∞—Å—Ç—å –ø–∞—Ä –æ—Ç–º–µ—á–µ–Ω–∞\n"
            "‚ùå - –ø–∞—Ä—ã –Ω–µ –æ—Ç–º–µ—á–µ–Ω—ã",
            reply_markup=reply_markup
        )
        logger.info(f"‚úÖ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_days_with_status –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await show_days(query)

async def show_days(query):
    user_id = query.from_user.id
    username = query.from_user.username or "–ë–µ–∑ username"
    logger.info(f"üìÖ –ü–æ–∫–∞–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (@{username})")
    
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    keyboard = []
    
    for day in days:
        keyboard.append([InlineKeyboardButton(day, callback_data=f"day_{day}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)

async def show_subjects(query, day, user_id):
    if user_id not in user_data:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    username = query.from_user.username or "–ë–µ–∑ username"
    student_data = user_data[user_id]
    subgroup = student_data['subgroup']
    student_number = student_data['number']
    week_type = get_current_week_type()
    
    logger.info(f"üìö –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è {day} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (@{username}): {student_data['fio']}")
    
    try:
        schedule_data = get_cached_sheet_data(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        subjects_with_status = []
        header = schedule_data[0]
        
        student_col = None
        for idx, cell in enumerate(header):
            if str(cell).strip() == str(student_number):
                student_col = idx
                break
        
        subject_count = 0
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        day_rows = []
        for row_num, row in enumerate(schedule_data[1:], start=2):
            if len(row) > 2 and row[0] == week_type and row[1] == day:
                day_rows.append((row_num, row))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for row_num, row in day_rows:
            subject = row[2]
            # –£–ø—Ä–æ—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            subject_type = "–õ–µ–∫—Ü–∏—è" if "–ª–µ–∫—Ü–∏–æ–Ω" in subject.lower() else "–ü—Ä–∞–∫—Ç–∏–∫–∞" if "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫" in subject.lower() else "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è" if "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω" in subject.lower() else "–ó–∞–Ω—è—Ç–∏–µ"
            
            status = ""
            if student_col and len(row) > student_col:
                mark = row[student_col].strip()
                if mark == '‚úÖ':
                    status = ' ‚úÖ'
                elif mark == '‚ùå':
                    status = ' ‚ùå'
                elif mark == '‚ö†Ô∏è':
                    status = ' ‚ö†Ô∏è'
            
            subject_count += 1
            button_text = f"{subject_type} {subject_count}{status}"
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            subjects_with_status.append((subject, button_text, status, row_num))
        
        if not subjects_with_status:
            logger.info(f"‚ÑπÔ∏è –ù–∞ {day} ({week_type}) –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await query.edit_message_text(f"‚ùå –ù–∞ {day} ({week_type}) –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
            return
            
        keyboard = []
        for i, (full_subject, button_text, status, row_num) in enumerate(subjects_with_status):
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å–∞
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"subject_{day}_{row_num}")])
        
        keyboard.append([InlineKeyboardButton("‚Äî‚Äî‚Äî", callback_data="separator")])
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å. –Ω–∞ –≤—Å–µ—Ö", callback_data=f"all_{day}_present"),
            InlineKeyboardButton("‚ùå –û—Ç—Å—É—Ç. –Ω–∞ –≤—Å–µ—Ö", callback_data=f"all_{day}_absent")
        ])
        keyboard.append([
            InlineKeyboardButton("‚ö†Ô∏è –û—Ç—Å—É—Ç. –Ω–∞ –≤—Å–µ—Ö(–£)", callback_data=f"all_{day}_excused")
        ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mark_attendance"),
            InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="mark_complete")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        full_subjects_text = "\n".join([f"‚Ä¢ {full_subject}{status}" for full_subject, _, status, _ in subjects_with_status])
        
        await query.edit_message_text(
            f"üìö {day} - {week_type}:\n\n{full_subjects_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:",
            reply_markup=reply_markup
        )
        logger.info(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è {day} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_subjects –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def show_subject_actions(query, day, row_num):
    user_id = query.from_user.id
    username = query.from_user.username or "–ë–µ–∑ username"
    logger.info(f"üéØ –ü–æ–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–¥–µ–Ω—å: {day}, —Å—Ç—Ä–æ–∫–∞: {row_num}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    try:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f"action_{day}_{row_num}_present"),
                InlineKeyboardButton("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f"action_{day}_{row_num}_absent")
            ],
            [
                InlineKeyboardButton("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª(–£)", callback_data=f"action_{day}_{row_num}_excused"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"day_{day}")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_subject_actions –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ–π—Å—Ç–≤–∏–π")

async def show_week_selection(query, user_id):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
    if user_id not in user_data:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    student_data = user_data[user_id]
    subgroup = student_data['subgroup']
    
    logger.info(f"üìÖ –í—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {student_data['fio']}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_data = get_cached_sheet_data(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª—è—Ö
        current_week = get_week_info(0)
        previous_week = get_week_info(-1)
        
        keyboard = []
        
        # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if current_week:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìÖ {current_week['string']}", 
                    callback_data=f"week_{current_week['string']}"
                )
            ])
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        if previous_week:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ
            week_has_classes = any(
                len(row) > 2 and row[0] == previous_week['string'] 
                for row in schedule_data[1:]
            )
            
            if week_has_classes:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚Ü©Ô∏è {previous_week['string']}", 
                        callback_data=f"week_{previous_week['string']}"
                    )
                ])
            else:
                keyboard.append([
                    InlineKeyboardButton(
                        "‚ùå –ù–µ–¥–µ–ª–∏ –Ω–µ—Ç", 
                        callback_data="week_none"
                    )
                ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:",
            reply_markup=reply_markup
        )
        logger.info(f"‚úÖ –í—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_week_selection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def mark_attendance(query, day, row_num, action, user_id):
    if user_id not in user_data:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    student_data = user_data[user_id]
    student_number = student_data['number']
    username = query.from_user.username or "–ë–µ–∑ username"
    
    logger.info(f"üéØ –û—Ç–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (@{username}): {student_data['fio']}, –¥–µ–Ω—å: {day}, –¥–µ–π—Å—Ç–≤–∏–µ: {action}, —Å—Ç—Ä–æ–∫–∞: {row_num}")
    
    subgroup = student_data['subgroup']
    week_type = get_current_week_type()
    
    try:
        emoji_map = {
            'present': '‚úÖ',
            'absent': '‚ùå',
            'excused': '‚ö†Ô∏è'
        }
        mark = emoji_map.get(action, '‚ùì')
        
        schedule_sheet = db.worksheet(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        header = schedule_sheet.row_values(1)
        
        student_col = None
        for idx, cell in enumerate(header):
            if str(cell).strip() == str(student_number):
                student_col = idx + 1  # gspread –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
                break
        
        if student_col is None:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_number} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏")
            return
        
        if row_num == "all":
            # –û—Ç–º–µ—Ç–∫–∞ –Ω–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –¥–Ω—è
            schedule_data = schedule_sheet.get_all_values()
            updated_count = 0
            
            for i, row in enumerate(schedule_data[1:], start=2):
                if len(row) > 2 and row[0] == week_type and row[1] == day:
                    if student_col <= len(row):
                        schedule_sheet.update_cell(i, student_col, mark)
                        updated_count += 1
            
            if updated_count > 0:
                logger.info(f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ {mark} –¥–ª—è –¥–Ω—è {day} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π")
                await show_subjects(query, day, user_id)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è –¥–Ω—è {day} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É")
        else:
            # –û—Ç–º–µ—Ç–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
            row_num_int = int(row_num)
            schedule_sheet.update_cell(row_num_int, student_col, mark)
            
            logger.info(f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ {mark} –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_num_int}, —Å—Ç–æ–ª–±–µ—Ü {student_col} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–Ω—è
            await show_subjects(query, day, user_id)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ mark_attendance –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    
    if user_id != ADMIN_ID:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (@{username})")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
        
    logger.critical(f"üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id} (@{username})")
    await update.message.reply_text("üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    import os
    os._exit(0)

# –£–¢–ò–õ–ò–¢–´
def get_current_week_type():
    try:
        # –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+3)
        moscow_tz = timezone(timedelta(hours=3))
        now = datetime.now(moscow_tz)
        
        semester_start = datetime(2025, 9, 1, tzinfo=moscow_tz)
        days_diff = (now - semester_start).days
        week_number = (days_diff // 7) + 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (—á–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è)
        week_type = "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" if week_number % 2 == 0 else "–ß–∏—Å–ª–∏—Ç–µ–ª—å"
        
        result = f"{week_type} - {week_number} –Ω–µ–¥–µ–ª—è"
        logger.info(f"üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {result} (–¥–∞—Ç–∞: {now.strftime('%d.%m.%Y %H:%M')})")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏: {e}")
        # Fallback –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - 8 –Ω–µ–¥–µ–ª—è"

def get_week_info(week_offset=0):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–µ–ª–µ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
    week_offset = 0 - —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
    week_offset = -1 - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è
    """
    try:
        moscow_tz = timezone(timedelta(hours=3))
        now = datetime.now(moscow_tz)
        
        semester_start = datetime(2025, 9, 1, tzinfo=moscow_tz)
        days_diff = (now - semester_start).days
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        week_number = (days_diff // 7) + 1 + week_offset
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ–¥–µ–ª—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–µ–º–µ—Å—Ç—Ä–∞ (1-17)
        if week_number < 1 or week_number > 17:
            return None
        
        week_type = "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" if week_number % 2 == 0 else "–ß–∏—Å–ª–∏—Ç–µ–ª—å"
        
        return {
            'number': week_number,
            'type': week_type,
            'string': f"{week_type} - {week_number} –Ω–µ–¥–µ–ª—è"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏: {e}")
        return None

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ username"
    
    logger.info(f"üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (@{username})")
    
    if user_id in user_data:
        student_data = user_data[user_id]
        await update.message.reply_text(
            f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n"
            f"–§–ò–û: {student_data['fio']}\n"
            f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: {student_data['subgroup']}\n"
            f"–ù–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ: {student_data['number']}\n\n"
            f"–î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
        )
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

# –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    username = query.from_user.username or "–ë–µ–∑ username"
    data = query.data
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        if data == "mark_attendance":
            await show_week_selection(query, user_id)
        elif data.startswith("week_"):
            if data == "week_none":
                await query.answer("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏", show_alert=True)
                return
            week_string = data[5:]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
            await show_days_with_status(query, user_id, week_string)
        elif data == "admin_status":
            if user_id == ADMIN_ID:
                await admin_server_status_from_query(query)
            else:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        elif data == "mark_complete":
            await handle_mark_complete(query, user_id)
        elif data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = []
            keyboard.append([InlineKeyboardButton("üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="mark_attendance")])
            if user_id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
            logger.info(f"üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        elif data == "admin_panel":
            if user_id == ADMIN_ID:
                keyboard = [
                    [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="admin_students")],
                    [InlineKeyboardButton("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data="admin_status")],  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
            else:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        elif data == "admin_students":
            await admin_show_students(query)
        elif data.startswith("day_"):
            day = data.split("_")[1]
            logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å: {day}")
            await show_subjects(query, day, user_id)
        elif data.startswith("subject_"):
            parts = data.split("_")
            day = parts[1]
            row_num = parts[2]
            logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç –≤ –¥–µ–Ω—å {day}, —Å—Ç—Ä–æ–∫–∞ {row_num}")
            await show_subject_actions(query, day, row_num)
        elif data.startswith("action_"):
            parts = data.split("_")
            day = parts[1]
            row_num = parts[2]
            action = parts[3]
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª {action} –Ω–∞ –¥–µ–Ω—å {day}, —Å—Ç—Ä–æ–∫–∞ {row_num}")
            await mark_attendance(query, day, row_num, action, user_id)
        elif data.startswith("all_"):
            parts = data.split("_")
            day = parts[1]
            action = parts[2]
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª {action} –Ω–∞ –í–°–ï –ø—Ä–µ–¥–º–µ—Ç—ã –¥–Ω—è {day}")
            await mark_attendance(query, day, "all", action, user_id)
        else:
            logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def test_connection():
    try:
        gc = gspread.service_account(filename='credentials.json')
        spreadsheet = gc.open_by_url(SPREADSHEET_URL)
        
        students_sheet = spreadsheet.worksheet("–°—Ç—É–¥–µ–Ω—Ç—ã")
        data = students_sheet.get_all_records()
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìä –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
        for student in data:
            logger.info(f"  {student}")
            
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    global db
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    db = connect_google_sheets()

    if db is None:
        logger.critical("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
        return

    # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("clearcache", clear_cache))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()