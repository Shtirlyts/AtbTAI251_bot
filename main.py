import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import gspread
from datetime import datetime, timezone, timedelta
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
from config import BOT_TOKEN, SPREADSHEET_URL, ADMIN_ID, EMOJI_MAP, get_google_credentials

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def connect_google_sheets():
    try:
        creds_dict = get_google_credentials()
        if creds_dict:
            # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            gc = gspread.service_account_from_dict(creds_dict)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        else:
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏–∑ —Ñ–∞–π–ª–∞
            gc = gspread.service_account(filename='credentials.json')
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —á–µ—Ä–µ–∑ —Ñ–∞–π–ª credentials.json")
        return gc.open_by_url(SPREADSHEET_URL)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = None
user_data = {}
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"üü¢ –ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    user_states[user_id] = "waiting_for_fio"
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"
    )
    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
    
    if user_states.get(user_id) == "waiting_for_fio":
        await handle_fio(update, context)
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if db is None:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    fio = update.message.text.strip()
    user_id = update.effective_user.id
    
    print(f"üîç –ü–æ–∏—Å–∫ –§–ò–û: {fio} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        students_sheet = db.worksheet("–°—Ç—É–¥–µ–Ω—Ç—ã")
        students_data = students_sheet.get_all_records()
        
        user_found = False
        student_number = None
        subgroup = None
        
        for student in students_data:
            if student['–§–ò–û'].lower() == fio.lower():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student}")
                
                existing_id = str(student.get('Telegram ID', '')).strip()
                if existing_id and existing_id.isdigit() and int(existing_id) != user_id:
                    await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    return
                else:
                    user_found = True
                    student_number = student['‚Ññ']
                    subgroup = student['–ü–æ–¥–≥—Ä—É–ø–ø–∞']
                    break
        
        if not user_found:
            await update.message.reply_text("‚ùå –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID
        cell = students_sheet.find(str(student_number))
        students_sheet.update_cell(cell.row, 4, str(user_id))
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω Telegram ID {user_id} –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ‚Ññ{student_number}")
        
        user_data[user_id] = {
            'fio': fio,
            'number': student_number,
            'subgroup': subgroup
        }
        
        user_states[user_id] = "registered"
        
        # –°–û–ó–î–ê–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –° –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨–Æ –î–õ–Ø –ê–î–ú–ò–ù–ê
        keyboard = []
        keyboard.append([InlineKeyboardButton("üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="mark_attendance")])
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if user_id == ADMIN_ID:
            keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
            f"–§–ò–û: {fio}\n"
            f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: {subgroup}\n",
            reply_markup=reply_markup
        )
        print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_fio: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="admin_students")],
        [InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="admin_reset_confirm")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def admin_show_students(query):
    try:
        students_sheet = db.worksheet("–°—Ç—É–¥–µ–Ω—Ç—ã")
        students_data = students_sheet.get_all_records()
        
        text = "üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
        for student in students_data:
            status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if student.get('Telegram ID') else "‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            text += f"{student['‚Ññ']}. {student['–§–ò–û']} - {status}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def admin_reset_registration(query):
    try:
        students_sheet = db.worksheet("–°—Ç—É–¥–µ–Ω—Ç—ã")
        students_sheet.batch_clear(["D2:D100"])
        
        user_data.clear()
        user_states.clear()
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã!", reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def admin_show_stats(query):
    try:
        students_sheet = db.worksheet("–°—Ç—É–¥–µ–Ω—Ç—ã")
        students_data = students_sheet.get_all_records()
        
        registered = sum(1 for s in students_data if s.get('Telegram ID'))
        total = len(students_data)
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        text += f"–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {total}\n"
        text += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {registered}\n"
        text += f"–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total - registered}\n"
        text += f"–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered/total*100:.1f}%"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def admin_confirm_reset(query):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="admin_reset_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_panel")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=reply_markup
    )

# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
async def handle_mark_complete(query, user_id):
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await show_days_with_status(query, user_id)

async def show_days_with_status(query, user_id):
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    subgroup = user_data[user_id]['subgroup']
    student_number = user_data[user_id]['number']
    week_type = get_current_week_type()
    
    try:
        schedule_sheet = db.worksheet(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        schedule_data = schedule_sheet.get_all_values()
        
        day_status = {}
        for row in schedule_data[1:]:
            if len(row) > 2 and row[0] == week_type:
                day = row[1]
                if day not in day_status:
                    day_status[day] = {'total': 0, 'marked': 0}
                
                day_status[day]['total'] += 1
                
                header = schedule_data[0]
                student_col = None
                for idx, cell in enumerate(header):
                    if str(cell).strip() == str(student_number):
                        student_col = idx
                        break
                
                if student_col and len(row) > student_col and row[student_col].strip() in ['‚úÖ', '‚ùå', '‚ö†Ô∏è']:
                    day_status[day]['marked'] += 1
        
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
        keyboard = []
        
        for day in days:
            status_text = ""
            if day in day_status:
                marked = day_status[day]['marked']
                total = day_status[day]['total']
                if total > 0:
                    if marked == total:
                        status_text = " ‚úÖ"
                    elif marked > 0:
                        status_text = " üü°"
                    else:
                        status_text = " ‚ùå"
            
            keyboard.append([InlineKeyboardButton(f"{day}{status_text}", callback_data=f"day_{day}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ({week_type}):\n\n"
            "‚úÖ - –≤—Å–µ –ø–∞—Ä—ã –æ—Ç–º–µ—á–µ–Ω—ã\n"
            "üü° - —á–∞—Å—Ç—å –ø–∞—Ä –æ—Ç–º–µ—á–µ–Ω–∞\n"
            "‚ùå - –ø–∞—Ä—ã –Ω–µ –æ—Ç–º–µ—á–µ–Ω—ã",
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_days_with_status: {e}")
        await show_days(query)

async def show_days(query):
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    keyboard = []
    
    for day in days:
        keyboard.append([InlineKeyboardButton(day, callback_data=f"day_{day}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)

async def show_subjects(query, day, user_id):
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    subgroup = user_data[user_id]['subgroup']
    student_number = user_data[user_id]['number']
    week_type = get_current_week_type()
    
    try:
        schedule_sheet = db.worksheet(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        schedule_data = schedule_sheet.get_all_values()
        
        subjects_with_status = []
        header = schedule_data[0]
        
        student_col = None
        for idx, cell in enumerate(header):
            if str(cell).strip() == str(student_number):
                student_col = idx
                break
        
        subject_count = 0
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        day_rows = []
        for row_num, row in enumerate(schedule_data[1:], start=2):
            if len(row) > 2 and row[0] == week_type and row[1] == day:
                day_rows.append((row_num, row))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for row_num, row in day_rows:
            subject = row[2]
            # –£–ø—Ä–æ—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            subject_type = "–õ–µ–∫—Ü–∏—è" if "–ª–µ–∫—Ü–∏–æ–Ω" in subject.lower() else "–ü—Ä–∞–∫—Ç–∏–∫–∞" if "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫" in subject.lower() else "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è" if "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω" in subject.lower() else "–ó–∞–Ω—è—Ç–∏–µ"
            
            status = ""
            if student_col and len(row) > student_col:
                mark = row[student_col].strip()
                if mark == '‚úÖ':
                    status = ' ‚úÖ'
                elif mark == '‚ùå':
                    status = ' ‚ùå'
                elif mark == '‚ö†Ô∏è':
                    status = ' ‚ö†Ô∏è'
            
            subject_count += 1
            button_text = f"{subject_type} {subject_count}{status}"
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            subjects_with_status.append((subject, button_text, status, row_num))
        
        if not subjects_with_status:
            await query.edit_message_text(f"‚ùå –ù–∞ {day} ({week_type}) –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
            return
            
        keyboard = []
        for i, (full_subject, button_text, status, row_num) in enumerate(subjects_with_status):
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å–∞
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"subject_{day}_{row_num}")])
        
        keyboard.append([InlineKeyboardButton("‚Äî‚Äî‚Äî", callback_data="separator")])
        keyboard.append([
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å. –Ω–∞ –≤—Å–µ—Ö", callback_data=f"all_{day}_present"),
            InlineKeyboardButton("‚ùå –û—Ç—Å—É—Ç. –Ω–∞ –≤—Å–µ—Ö", callback_data=f"all_{day}_absent")
        ])
        keyboard.append([
            InlineKeyboardButton("‚ö†Ô∏è –û—Ç—Å—É—Ç. –Ω–∞ –≤—Å–µ—Ö(–£)", callback_data=f"all_{day}_excused")
        ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="mark_attendance"),
            InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="mark_complete")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        full_subjects_text = "\n".join([f"‚Ä¢ {full_subject}{status}" for full_subject, _, status, _ in subjects_with_status])
        
        await query.edit_message_text(
            f"üìö {day} - {week_type}:\n\n{full_subjects_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:",
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_subjects: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def show_subject_actions(query, day, row_num):
    try:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f"action_{day}_{row_num}_present"),
                InlineKeyboardButton("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f"action_{day}_{row_num}_absent")
            ],
            [
                InlineKeyboardButton("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª(–£)", callback_data=f"action_{day}_{row_num}_excused"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"day_{day}")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=reply_markup)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_subject_actions: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ–π—Å—Ç–≤–∏–π")

async def mark_attendance(query, day, row_num, action, user_id):
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
        
    student_data = user_data[user_id]
    student_number = student_data['number']
    
    print(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data[user_id]['fio']} –æ—Ç–º–µ—á–∞–µ—Ç: {day}, –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
    
    subgroup = student_data['subgroup']
    week_type = get_current_week_type()
    
    print(f"üéØ –û—Ç–º–µ—á–∞–µ–º: {day}, —Å—Ç—Ä–æ–∫–∞: {row_num}, –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
    
    try:
        emoji_map = {
            'present': '‚úÖ',
            'absent': '‚ùå',
            'excused': '‚ö†Ô∏è'
        }
        mark = emoji_map.get(action, '‚ùì')
        
        schedule_sheet = db.worksheet(f"{subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        header = schedule_sheet.row_values(1)
        
        student_col = None
        for idx, cell in enumerate(header):
            if str(cell).strip() == str(student_number):
                student_col = idx + 1  # gspread –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
                break
        
        if student_col is None:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_number}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏")
            return
        
        if row_num == "all":
            # –û—Ç–º–µ—Ç–∫–∞ –Ω–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –¥–Ω—è
            schedule_data = schedule_sheet.get_all_values()
            updated_count = 0
            
            for i, row in enumerate(schedule_data[1:], start=2):
                if len(row) > 2 and row[0] == week_type and row[1] == day:
                    if student_col <= len(row):
                        schedule_sheet.update_cell(i, student_col, mark)
                        updated_count += 1
                        print(f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ {mark} –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Å—Ç—Ä–æ–∫–∞ {i}")
            
            if updated_count > 0:
                await show_subjects(query, day, user_id)
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É")
        else:
            # –û—Ç–º–µ—Ç–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
            row_num_int = int(row_num)
            schedule_sheet.update_cell(row_num_int, student_col, mark)
            print(f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ {mark} –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_num_int}, —Å—Ç–æ–ª–±–µ—Ü {student_col}")
            
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–Ω—è
            await show_subjects(query, day, user_id)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ mark_attendance: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–∫–∏")

# –£–¢–ò–õ–ò–¢–´
def get_current_week_type():
    return "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å - 8 –Ω–µ–¥–µ–ª—è"

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        student_data = user_data[user_id]
        await update.message.reply_text(
            f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n"
            f"–§–ò–û: {student_data['fio']}\n"
            f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: {student_data['subgroup']}\n"
            f"–ù–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ: {student_data['number']}\n\n"
            f"–î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
        )
    else:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")

# –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        if data == "mark_attendance":
            await show_days_with_status(query, user_id)
        elif data == "mark_complete":
            await handle_mark_complete(query, user_id)
        elif data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = []
            keyboard.append([InlineKeyboardButton("üìù –û—Ç–º–µ—Ç–∏—Ç—å—Å—è", callback_data="mark_attendance")])
            if user_id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        elif data == "admin_panel":
            if user_id == ADMIN_ID:
                keyboard = [
                    [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data="admin_students")],
                    [InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="admin_reset_confirm")],  # –ò–∑–º–µ–Ω–µ–Ω–æ
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
            else:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        elif data == "admin_students":
            await admin_show_students(query)
        elif data == "admin_reset_confirm": 
            await admin_confirm_reset(query)
        elif data == "admin_reset_yes":
            await admin_reset_registration(query)
        elif data == "admin_stats":
            await admin_show_stats(query)
        elif data.startswith("day_"):
            day = data.split("_")[1]
            print(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å: {day}")
            await show_subjects(query, day, user_id)
        elif data.startswith("subject_"):
            parts = data.split("_")
            day = parts[1]
            row_num = parts[2]
            print(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç –≤ –¥–µ–Ω—å {day}, —Å—Ç—Ä–æ–∫–∞ {row_num}")
            await show_subject_actions(query, day, row_num)
        elif data.startswith("action_"):
            parts = data.split("_")
            day = parts[1]
            row_num = parts[2]
            action = parts[3]
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª {action} –Ω–∞ –¥–µ–Ω—å {day}, —Å—Ç—Ä–æ–∫–∞ {row_num}")
            await mark_attendance(query, day, row_num, action, user_id)
        elif data.startswith("all_"):
            parts = data.split("_")
            day = parts[1]
            action = parts[2]
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª {action} –Ω–∞ –í–°–ï –ø—Ä–µ–¥–º–µ—Ç—ã –¥–Ω—è {day}")
            await mark_attendance(query, day, "all", action, user_id)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def test_connection():
    try:
        gc = gspread.service_account(filename='credentials.json')
        spreadsheet = gc.open_by_url(SPREADSHEET_URL)
        
        students_sheet = spreadsheet.worksheet("–°—Ç—É–¥–µ–Ω—Ç—ã")
        data = students_sheet.get_all_records()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
        for student in data:
            print(f"  {student}")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    global db
    db = connect_google_sheets()

    if db is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
        return

    # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()